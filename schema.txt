BusManager API Schema

Considerations:
Location & university needs Suggestions so that different
people do not change university spelling
Location => General Region
(JP Nagar, Kormangala etc)
Phone Number:
	+<countrycode><phone number>
	Should be in this format ONLY




We have 3 Primary Sections:

	-> Admin (UI Based)
	-> Driver API
		Everything Relating to the Driver App
	-> Student API
		Everything Relating to the Student App
	-> main -> Other Routes

Admin
	baseroute: /admin

	-> Mark Payment Status
		Works based on the is_paid boolean property of each Student
		Every 30 days, is_paid becomes false.
		Then the student needs to pay the admin via their registered mobile number
		Every Unpaid user is seen in this Mark Payment Status and once the admin recieves 
		payment from a number, the admin can search the student using his number and Mark
		them as paid. this sets their is_paid to true.

	-> Journey Information
		This gives a list of all Drivers and shows how many students are travelling in that 
		particular driver's bus that day.

	-> Verify Drivers
		At Registration time, the phone number is verified via an OTP. 
		But, Until the driver's license and bus number have been verified, their account is marked
		as unverified. Once the admin is able to verify this information, the admin can search using
		phone number and mark that driver as verified
	
	-> Delete Driver
		Search by number and permanantly delete Driver

	-> Delete Student
		Search by number and permanantly delete student

	-> Reallocate Student ID
		Every 30 days student's is_paid is set to false.
		Every 180days (6months) the student account gets lapsed. and appears in this section of the
		admin panel.
		After the admin confirms the 25$ downpayment after 6 months, then the admin can search via number
		and press the reallocate button
		This basically sets is_paid to true and gives the student a new student ID


-> Driver API
	baseroute: /driver

	-> /register (POST)
		-> Register a new Driver
		-> Accepts:
			name: String
			phone: String
			bus_number: String
			location: String (Region) -> Which Local Area do they work in. Example. JP Nagar, Jayanagar
			license_number: String
			experience: String (Years)
		-> Sends an OTP to provided Phone number
		-> (On App) Must be immediately followed by /verifyphone
		-> Returns:
				Status: 200 (OK)

	-> /resend_otp/phone => Resends OTP (GET)
	-> /verifyphone/<phone>/<otp> (GET)
		To be called right after Registration
		Basically Checks if the provided number is valid

		-> Returns:
				Status: 200 (OK)
						0 (Invalid Driver, OTP Incorrect)

	-> /login/<phone> (GET, POST)
		GET:
			Sends an OTP To phone
		
		POST:
			recieves OTP Via otp key in post data
			verifies it, if correct sends a session key that must be used
			for all protected calls to access the API

		-> Returns 
			Status: 200(OK, SK), 0(Incorrect OTP, No Student)
	
	-> /allow_student (POST)
		-> Accepts:
			student_id, license_number
		Basically, If student has paid and has the same location (Region) as the driver, then a match is 
		made and the student is allowed into the bus
		student is added to that day's journey under the driver

		-> Returns:
			Status: 200(OK), 0(Invalid Student/Driver, Not Paid, Location Doesnt Match)

	-> /add_rating (POST)
		-> Accepts:
			license_number, student_phone, rating
		Used to Rate the Driver
		-> Returns 
			Status: 200(OK), 0(Invalid Student/Driver)

	-> /edit_profile
		-> Accepts:
			<same as register> + Database ID (Identifier)
		Edits the drivers data
		IF phone, license or bus_number have been changed then Driver needs to be
		re_verified by the Admin.
		If phone number changed, an OTP is sent 
		App will have to show and send to /verifyphone for the driver again

		-> Returns:
			Status: 200(OK), 0(Invalid ID)

-> Main API
	-> /getlocations => Gets all Locations(Regions) on the Platform -> Used for AutoFill or Suggestions
	-> /getuniversities => Gets all Universities on the Platform
		
-> Student API
	baseroute: /student
	-> /register (POST)
		Accepts:
			name, phone_number, location(Region),
			university_name, university_address
			home_addres

		Creates a Student Account and assigns a random student ID
		Sends OTP to that phone number
		In app, needs to be immediately followed by /verifyphone

		Returns:
			200: (Created)

	-> /resend_otp/<phone> (GET) => Resend OTP
	-> /verifyphone/<phone>/<otp> (GET) => Verify if OTP is correct

	-> /login/<phone> (GET, POST)
		GET:
			send OTP to number
		POST:
			accepts: otp
			verify OTP & Return Session Key,
			This session key must be provided in every subsequent 
			request to authenticate student

	-> /get_available_buses/<phone> (GET)
		Returns:
		200(OK, drivers(LIST <> JSONRep))
		0(Student Does not Exist)

	-> /checkpaymentstatus/<number> (GET)
		Should be called right after login from App.
		-> Basically, if 6 months have lapsed, since creation,
		account is marked as Lapsed until 25$ is paid to admin and admin
		reallocates the student ID from Admin panel.
		-> If 30 days have passed since last paid date then isPaid is
		false

		Returns:
			200(OK, isPaid)
			0((Not Paid, Lapsed, OverDue), False)


	-> /edit_profile
		Accepts:
		id, name, phone_number, address, location,
		university, university_address

		Basically Updates Profile but if Phone Number changes,
		then we send OTP and APp needs to go to /verifyphone

		Returns:
			200(Updated)
			0(No Student)

